package com.dooapp.firea.entity;

import org.jdom2.Attribute;
import org.jdom2.Element;

//Start of user code for imports
// TODO: import me!
//End of user code


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.dooapp.firea.wrapper.Reading;
import com.dooapp.lib.common.entity.Bean;


/*
 * Class
 * <!-- Start of user code comment for Reading Class
 * End of user code -->
 */
//Start of user code for queries
//End of user code

@javax.persistence.Entity
public class ReadingBean
//Start of user code bloc for inheritance

//End of user code
//Start of user code bloc for interfaces
 implements Bean
//End of user code
{
	//Start of user code for attributes
	// Other attributes
	//End of user code

	/**
	 * The logger
	 */
	private static final Logger logger = LoggerFactory.getLogger(ReadingBean.class);

	
	private double buildingPressure;
	@javax.persistence.Column(name = "CREATION_DATE")
	@javax.persistence.Temporal(javax.persistence.TemporalType.TIMESTAMP)
	private java.util.Date creationDate;
	
	@javax.persistence.ManyToOne(cascade = javax.persistence.CascadeType.ALL)
	private DeviceBean device;
	
	private double fanPressure;
	
	@javax.persistence.ManyToOne(cascade = javax.persistence.CascadeType.ALL)
	private GaugeModeBean gaugemode;
	@javax.persistence.Id
	@javax.persistence.SequenceGenerator(name = "seq", initialValue = 1, allocationSize = 10)
	@javax.persistence.GeneratedValue(strategy = javax.persistence.GenerationType.SEQUENCE, generator = "seq")
	@javax.persistence.Column(name = "ID")
	private long id;
	
	private boolean lowFlow;
	
	@javax.persistence.OneToOne(optional = false, cascade = javax.persistence.CascadeType.ALL)
	private PointBean point;
	
	private int timeAverage;
	@javax.persistence.Column(name = "UPDATE_DATE")
	@javax.persistence.Temporal(javax.persistence.TemporalType.TIMESTAMP)
	private java.util.Date updateDate;
	@javax.persistence.Version
	@javax.persistence.Column(name = "VERSIONCOLUMN")
	private int version;

	@javax.persistence.Transient
	private Reading wrapper;
    	
	/**
	 * The current UUID of this object.<br>
	 * It's generated by the JPA provider, so you do not have to do it yourself.<br>
	 * <br>
	 * 
	 * @see <a
	 *      href="http://openjpa.apache.org/builds/2.1.1/apache-openjpa-2.1.1/docs/jpa_overview_meta_field.html#jpa_overview_meta_gen">jpa
	 *      documentation</a>
	 * @see <a href="http://fr.wikipedia.org/wiki/UUID">wikipedia</a>
	 */
	@javax.persistence.Column(name = "UUID", columnDefinition = "CHAR(36)")
	protected String uuid;
	/*
	 * <!-- Start of user code comment for Reading wrapper getter
	 * End of user code -->
	 */
	@javax.persistence.Transient
	@Override
	public Reading getWrapper() {
		if (wrapper == null) {
			wrapper = new Reading(this);
		}
		return wrapper;
	}
	
	@javax.persistence.Transient
	@Override
	public boolean isWrapped() { 
		return wrapper != null;
	}
	
	/*
	 * <!-- Start of user code comment for Reading wrapper setter
	 * End of user code -->
	 */
	@javax.persistence.Transient
	public void setWrapper(Reading wrapper) {
		if (this.wrapper != null && this.wrapper != wrapper) {
			throw new RuntimeException("A bean can only have one wrapper, use #getWrapper instead");
		}
		this.wrapper = wrapper;
	}

	/**
	 * Configure date and identifiant when persisting the object the first time
	 */
	@javax.persistence.PrePersist
	void initDates() {
		updateDate = new java.util.Date();
		creationDate = new java.util.Date();
		if (uuid == null) {
			uuid = java.util.UUID.randomUUID().toString();
		}
	}
	
	/**
	 * Configure the update date when updating the object
	 */
	@javax.persistence.PreUpdate
	void initUpdateDate() {
		updateDate = new java.util.Date();
	}
	

	/*
	 * <!-- Start of user code comment for buildingPressure getter
	 * End of user code -->
	 */
	public double getBuildingPressure(){
		return this.buildingPressure;
	}
	
	/*
	 * <!-- Start of user code comment for buildingPressure setter
	 * End of user code -->
	 */
	public void setBuildingPressure(double arg0){
		this.buildingPressure = arg0;
	}
	/*
	 * <!-- Start of user code comment for creationDate getter
	 * End of user code -->
	 */
	public java.util.Date getCreationDate(){
		return this.creationDate;
	}
	
	/*
	 * <!-- Start of user code comment for creationDate setter
	 * End of user code -->
	 */
	public void setCreationDate(java.util.Date arg0){
		this.creationDate = arg0;
	}
	
	/*
	 * <!-- Start of user code comment for creationDate unsetter
	 * End of user code -->
	 */
	public void unsetCreationDate(java.util.Date arg0){
		this.creationDate = null;
	}
	/*
	 * <!-- Start of user code comment for device getter
	 * End of user code -->
	 */
	public DeviceBean getDevice(){
		return this.device;
	}
	
	/*
	 * <!-- Start of user code comment for device setter
	 * End of user code -->
	 */
	public void setDevice(DeviceBean arg0){
		this.device = arg0;
	}
	
	/*
	 * <!-- Start of user code comment for device unsetter
	 * End of user code -->
	 */
	public void unsetDevice(){
			this.device = null;
			
	} 
	/*
	 * <!-- Start of user code comment for fanPressure getter
	 * End of user code -->
	 */
	public double getFanPressure(){
		return this.fanPressure;
	}
	
	/*
	 * <!-- Start of user code comment for fanPressure setter
	 * End of user code -->
	 */
	public void setFanPressure(double arg0){
		this.fanPressure = arg0;
	}
	/*
	 * <!-- Start of user code comment for gaugemode getter
	 * End of user code -->
	 */
	public GaugeModeBean getGaugemode(){
		return this.gaugemode;
	}
	
	/*
	 * <!-- Start of user code comment for gaugemode setter
	 * End of user code -->
	 */
	public void setGaugemode(GaugeModeBean arg0){
		this.gaugemode = arg0;
	}
	
	/*
	 * <!-- Start of user code comment for gaugemode unsetter
	 * End of user code -->
	 */
	public void unsetGaugemode(){
			this.gaugemode = null;
			
	} 
	/*
	 * <!-- Start of user code comment for id getter
	 * End of user code -->
	 */
	public long getId(){
		return this.id;
	}
	
	/*
	 * <!-- Start of user code comment for id setter
	 * End of user code -->
	 */
	public void setId(long arg0){
		this.id = arg0;
	}
	/*
	 * <!-- Start of user code comment for lowFlow getter
	 * End of user code -->
	 */
	public boolean isLowFlow(){
		return this.lowFlow;
	}
	
	/*
	 * <!-- Start of user code comment for lowFlow setter
	 * End of user code -->
	 */
	public void setLowFlow(boolean arg0){
		this.lowFlow = arg0;
	}
	/*
	 * <!-- Start of user code comment for point getter
	 * End of user code -->
	 */
	public PointBean getPoint(){
		return this.point;
	}
	
	/*
	 * <!-- Start of user code comment for point setter
	 * End of user code -->
	 */
	public void setPoint(PointBean arg0){
		this.point = arg0;
	}
	
	/*
	 * <!-- Start of user code comment for point unsetter
	 * End of user code -->
	 */
	public void unsetPoint(){
			if (this.point == null) {
				return;
			}
			PointBean oldpoint = this.point;
			this.point = null;
			oldpoint.unsetReadings();
	} 
	/*
	 * <!-- Start of user code comment for timeAverage getter
	 * End of user code -->
	 */
	public int getTimeAverage(){
		return this.timeAverage;
	}
	
	/*
	 * <!-- Start of user code comment for timeAverage setter
	 * End of user code -->
	 */
	public void setTimeAverage(int arg0){
		this.timeAverage = arg0;
	}
	/*
	 * <!-- Start of user code comment for updateDate getter
	 * End of user code -->
	 */
	public java.util.Date getUpdateDate(){
		return this.updateDate;
	}
	
	/*
	 * <!-- Start of user code comment for updateDate setter
	 * End of user code -->
	 */
	public void setUpdateDate(java.util.Date arg0){
		this.updateDate = arg0;
	}
	
	/*
	 * <!-- Start of user code comment for updateDate unsetter
	 * End of user code -->
	 */
	public void unsetUpdateDate(java.util.Date arg0){
		this.updateDate = null;
	}
	/*
	 * <!-- Start of user code comment for version getter
	 * End of user code -->
	 */
	public int getVersion(){
		return this.version;
	}
	
	/*
	 * <!-- Start of user code comment for version setter
	 * End of user code -->
	 */
	public void setVersion(int arg0){
		this.version = arg0;
	}
    

	public Element toXML(){
		Element e = new Element("Reading");
		if (uuid != null)
			e.setAttribute(new Attribute("uuid", uuid));
		e.setAttribute(new Attribute("timeAverage", String.valueOf(getTimeAverage())));
		e.setAttribute(new Attribute("fanPressure", String.valueOf(getFanPressure())));
		e.setAttribute(new Attribute("lowFlow", String.valueOf(isLowFlow())));
		e.setAttribute(new Attribute("buildingPressure", String.valueOf(getBuildingPressure())));
		e.setAttribute(new Attribute("id", String.valueOf(getId())));
		if (getCreationDate() != null)
			e.setAttribute(new Attribute("creationDate", getCreationDate().toString()));
		if (getUpdateDate() != null)
			e.setAttribute(new Attribute("updateDate", getUpdateDate().toString()));
		e.setAttribute(new Attribute("version", String.valueOf(getVersion())));
		
		if (getPoint() != null)
			e.setAttribute("point", String.valueOf(getPoint().getId()));
		if (getDevice() != null)
			e.setAttribute("device", String.valueOf(getDevice().getId()));
		if (getGaugemode() != null)
			e.setAttribute("gaugemode", String.valueOf(getGaugemode().getId()));
		
		return e;
	}

	//Start of user code for methods
	// Other methods
	//End of user code

}
