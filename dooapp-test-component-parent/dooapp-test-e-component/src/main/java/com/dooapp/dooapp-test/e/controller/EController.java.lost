
Wed Mar 27 16:56:09 CET 2013
================================================================================
package com.dooapp.dooapp-test.e.controller;
import java.util.ResourceBundle;
import java.util.concurrent.Executor;
import javafx.beans.property.ObjectProperty;
import javafx.scene.Node;
import javax.inject.Inject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.dooapp.dooapp-test.wrapper.E;
import com.dooapp.lib.annotation.Context;
import com.dooapp.lib.annotation.FX;
import com.dooapp.lib.controller.AbstractController;
import com.dooapp.lib.event.bus.EventBus;
/**
 * Controller to show and edit E.<br>
 * <br>
 * <!-- begin-user-doc -->
 * <!--  end-user-doc  -->
 * Created at : date<br>
 *
 * @author genmymodel
 * @since 1.0-SNAPSHOT
 * @generated
 */
public class EController extends AbstractController<Node>
//Start of user code bloc for interfaces
//End of user code
{
    /**
     * The famous {@link org.slf4j.Logger}
     * <!-- begin-user-doc -->
     * <!--  end-user-doc  -->
     *
     * @generated
     */
    private static final Logger logger = LoggerFactory.getLogger(EController.class);
    /**
     * The famous {@link com.dooapp.lib.event.bus.EventBus}
     * <!-- begin-user-doc -->
     * <!--  end-user-doc  -->
     *
     * @generated
     */
    @Inject
    private EventBus bus;
    /**
     * The famous {@link java.util.ResourceBundle}
     * <!-- begin-user-doc -->
     * <!--  end-user-doc  -->
     *
     * @generated
     */
    @Inject
    private ResourceBundle rb;
    /**
     * An {@link java.util.concurrent.Executor} going back to the FX-Thread
     * <!-- begin-user-doc -->
     * <!--  end-user-doc  -->
     *
     * @generated
     */
    @Inject
    @FX
    private Executor fx;
    /**
     * The E we will use to configure this controller
     *
     * <!-- begin-user-doc -->
     * <!--  end-user-doc  -->
     * @generated
     */
    @Inject
    @Context
    private ObjectProperty<E>itemProperty;
    /**
     * {@inheritDoc}
     * <!-- begin-user-doc -->
     * <!--  end-user-doc  -->
     *
     * @generated
     */
    @Override
    protected void configureView() {
    }
    /**
     * protected constructor to prevent non IOC instantiation.
     *
     * <!-- begin-user-doc -->
     * <!--  end-user-doc  -->
     * @generated
     */
    @Inject
    protected EController() {
    }
    /**
     * {@inheritDoc}<br>
     * Use {@link #addObservables(javafx.collections.ObservableList...)} and
     * {@link #addObservables(javafx.beans.value.ObservableValue...)} to register every value that will call
     * {@link #configure()} and {@link #unconfigure()} when they change.<br>
     * To have more information see http://gitlab.jack.dooapp.com/dooapp-lib/wikis/controller.registerObservables
     *
     * @see http://gitlab.jack.dooapp.com/dooapp-lib/wikis/controller.registerObservables
     *      <!-- begin-user-doc -->
     *      <!--  end-user-doc  -->
     * @generated
     */
    @Override
    protected void registerObservables() {
        addObservables(itemProperty);
    }
}


Wed Mar 27 16:56:10 CET 2013
================================================================================
package com.dooapp.dooapp-test.e.controller;

import java.util.ResourceBundle;
import java.util.concurrent.Executor;

import javafx.fxml.FXML;

import javafx.beans.property.ObjectProperty;
import javafx.scene.Node;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.TextField;
import javafx.scene.control.CheckBox;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;




import com.dooapp.dooapp-test.wrapper.E;

import com.dooapp.lib.annotation.Context;
import com.dooapp.lib.annotation.FX;
import com.dooapp.lib.controller.AbstractController;
import com.dooapp.lib.event.bus.EventBus;


/**
 * <!-- begin-user-doc -->
 * <!--  end-user-doc  -->
 * @generated
 */
public class EController extends AbstractController<Node>
// Start of user code bloc for interfaces
//End of user code
{
	/**
	 * The famous {@link Logger}
 	 * <!-- begin-user-doc -->
 	 * <!--  end-user-doc  -->
 	 * @generated
 	 */
	private static final Logger logger = LoggerFactory.getLogger(EController.class);
	
	/**
	 * The famous {@link EventBus}
	 * @generated
	 */
	@Inject
	private EventBus bus;

	/**
	 * The famous {@link ResourceBundle}
	 * @generated
	 */
	@Inject
	private ResourceBundle rb;

	/**
	 * An {@link Executor} going back to the FX-Thread
	 * @generated
	 */
	@Inject
	@FX
	private Executor fx;

	/**
	 * @generated
	 */
	@Inject
	@Context
	private ObjectProperty<E> itemProperty;	


	/**
	 * protected constructor to prevent non IOC instantiation.
	 * @generated
	 */
	@Inject
	protected EController(){}
	

	/**
	 * {@inheritDoc}
	 * @generated
	 */
	@Override
	protected void configureView() {
		E item = itemProperty.get();
	}

	/**
	 * {@inheritDoc}<br>
	 * Use {@link #addObservables(javafx.collections.ObservableList...)} and
	 * {@link #addObservables(javafx.beans.value.ObservableValue...)} to register every value that will call
	 * {@link #configure()} and {@link #unconfigure()} when they change.<br>
	 * To have more information see http://gitlab.jack.dooapp.com/dooapp-lib/wikis/controller.registerObservables
	 * 
	 * @see http://gitlab.jack.dooapp.com/dooapp-lib/wikis/controller.registerObservables
	 * @generated
	 */
	@Override
	protected void registerObservables() {
		addObservables(itemProperty);
	}
}

Wed Mar 27 17:02:48 CET 2013
================================================================================
package com.dooapp.dooapp-test.e.controller;

import java.util.ResourceBundle;
import java.util.concurrent.Executor;

import javafx.fxml.FXML;

import javafx.beans.property.ObjectProperty;
import javafx.scene.Node;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.TextField;
import javafx.scene.control.CheckBox;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;




import com.dooapp.dooapp-test.wrapper.E;

import com.dooapp.lib.annotation.Context;
import com.dooapp.lib.annotation.FX;
import com.dooapp.lib.controller.AbstractController;
import com.dooapp.lib.event.bus.EventBus;


/**
 * <!-- begin-user-doc -->
 * <!--  end-user-doc  -->
 * @generated
 */
public class EController extends AbstractController<Node>
// Start of user code bloc for interfaces
//End of user code
{
	/**
	 * The famous {@link Logger}
 	 * <!-- begin-user-doc -->
 	 * <!--  end-user-doc  -->
 	 * @generated
 	 */
	private static final Logger logger = LoggerFactory.getLogger(EController.class);
	
	/**
	 * The famous {@link EventBus}
	 * @generated
	 */
	@Inject
	private EventBus bus;

	/**
	 * The famous {@link ResourceBundle}
	 * @generated
	 */
	@Inject
	private ResourceBundle rb;

	/**
	 * An {@link Executor} going back to the FX-Thread
	 * @generated
	 */
	@Inject
	@FX
	private Executor fx;

	/**
	 * @generated
	 */
	@Inject
	@Context
	private ObjectProperty<E> itemProperty;	


	/**
	 * protected constructor to prevent non IOC instantiation.
	 * @generated
	 */
	@Inject
	protected EController(){}
	

	/**
	 * {@inheritDoc}
	 * @generated
	 */
	@Override
	protected void configureView() {
		E item = itemProperty.get();
	}

	/**
	 * {@inheritDoc}<br>
	 * Use {@link #addObservables(javafx.collections.ObservableList...)} and
	 * {@link #addObservables(javafx.beans.value.ObservableValue...)} to register every value that will call
	 * {@link #configure()} and {@link #unconfigure()} when they change.<br>
	 * To have more information see http://gitlab.jack.dooapp.com/dooapp-lib/wikis/controller.registerObservables
	 * 
	 * @see http://gitlab.jack.dooapp.com/dooapp-lib/wikis/controller.registerObservables
	 * @generated
	 */
	@Override
	protected void registerObservables() {
		addObservables(itemProperty);
	}
}

Wed Mar 27 17:02:48 CET 2013
================================================================================
package com.dooapp.dooapp-test.e.controller;

import java.util.ResourceBundle;
import java.util.concurrent.Executor;

import javafx.fxml.FXML;

import javafx.beans.property.ObjectProperty;
import javafx.scene.Node;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.TextField;
import javafx.scene.control.CheckBox;

import javax.inject.Inject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;




import com.dooapp.dooapp-test.wrapper.E;

import com.dooapp.lib.annotation.Context;
import com.dooapp.lib.annotation.FX;
import com.dooapp.lib.controller.AbstractController;
import com.dooapp.lib.event.bus.EventBus;


/**
 * <!-- begin-user-doc -->
 * <!--  end-user-doc  -->
 * @generated
 */
public class EController extends AbstractController<Node>
// Start of user code bloc for interfaces
//End of user code
{
	/**
	 * The famous {@link Logger}
 	 * <!-- begin-user-doc -->
 	 * <!--  end-user-doc  -->
 	 * @generated
 	 */
	private static final Logger logger = LoggerFactory.getLogger(EController.class);
	
	/**
	 * The famous {@link EventBus}
	 * @generated
	 */
	@Inject
	private EventBus bus;

	/**
	 * The famous {@link ResourceBundle}
	 * @generated
	 */
	@Inject
	private ResourceBundle rb;

	/**
	 * An {@link Executor} going back to the FX-Thread
	 * @generated
	 */
	@Inject
	@FX
	private Executor fx;

	/**
	 * @generated
	 */
	@Inject
	@Context
	private ObjectProperty<E> itemProperty;	


	/**
	 * protected constructor to prevent non IOC instantiation.
	 * @generated
	 */
	@Inject
	protected EController(){}
	

	/**
	 * {@inheritDoc}
	 * @generated
	 */
	@Override
	protected void configureView() {
		E item = itemProperty.get();
	}

	/**
	 * {@inheritDoc}<br>
	 * Use {@link #addObservables(javafx.collections.ObservableList...)} and
	 * {@link #addObservables(javafx.beans.value.ObservableValue...)} to register every value that will call
	 * {@link #configure()} and {@link #unconfigure()} when they change.<br>
	 * To have more information see http://gitlab.jack.dooapp.com/dooapp-lib/wikis/controller.registerObservables
	 * 
	 * @see http://gitlab.jack.dooapp.com/dooapp-lib/wikis/controller.registerObservables
	 * @generated
	 */
	@Override
	protected void registerObservables() {
		addObservables(itemProperty);
	}
}
